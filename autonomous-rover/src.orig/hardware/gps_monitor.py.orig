import time
import math
import threading
import logging
import serial
import numpy as np
from geopy.distance import geodesic

# Configure logging
logger = logging.getLogger("rover.hardware.gps")

class GPSMonitor:
    """
    Simple GPS monitor for tracking position and heading using dual GPS modules.
    
    This implementation focuses on clarity, simplicity, and robust error handling.
    """
    
    def __init__(self, main_port='/dev/ttyACM0', secondary_port='/dev/ttyACM1', 
                 baud_rate=115200, timeout=0.1, simulation_mode=False):
        """
        Initialize GPS monitor that handles front and rear GPS units.
        
        Args:
            main_port: Serial port for front GPS
            secondary_port: Serial port for rear GPS
            baud_rate: Baud rate for serial communication
            timeout: Serial timeout in seconds
            simulation_mode: If True, generate simulated GPS data
        """
        self.simulation_mode = simulation_mode
        self.gps_data = {
            "front": self._create_empty_gps_data(),
            "rear": self._create_empty_gps_data()
        }
        
        logger.info(f"Initializing GPS Monitor (simulation={simulation_mode})")
        
        # For real hardware mode
        if not simulation_mode:
            try:
                # Try to connect to GPS hardware
                self.front_serial = serial.Serial(main_port, baud_rate, timeout=timeout)
                self.rear_serial = serial.Serial(secondary_port, baud_rate, timeout=timeout)
                logger.info(f"Connected to front GPS on {main_port}")
                logger.info(f"Connected to rear GPS on {secondary_port}")
                
                # Start GPS reader threads
                self._start_gps_readers()
            except Exception as e:
                logger.error(f"Failed to initialize hardware GPS: {e}")
                logger.warning("Switching to simulation mode")
                self.simulation_mode = True
        
        # Start simulation if needed
        if self.simulation_mode:
            self._start_simulation()
    
    def _create_empty_gps_data(self):
        """Create an empty GPS data structure"""
        return {
            "lat": None,
            "lon": None, 
            "heading": None,
            "speed": 0.0,
            "fix_quality": 0,
            "last_update": 0,
            "messages_per_sec": 0,
            "hdop": 99.9,
            "satellites": 0
        }
    
    def _start_gps_readers(self):
        """Start threads to read from the GPS hardware"""
        self.running = True
        
        # Create and start front GPS reader thread
        self.front_thread = threading.Thread(
            target=self._gps_reader,
            args=(self.front_serial, "front"),
            daemon=True
        )
        self.front_thread.start()
        
        # Create and start rear GPS reader thread
        self.rear_thread = threading.Thread(
            target=self._gps_reader,
            args=(self.rear_serial, "rear"),
            daemon=True
        )
        self.rear_thread.start()
    
    def _gps_reader(self, serial_port, gps_name):
        """Thread function to read and parse GPS data"""
        logger.debug(f"Starting {gps_name} GPS reader thread")
        message_buffer = ""
        message_count = 0
        last_message_count_time = time.time()
        
        try:
            while self.running:
                try:
                    # Read data if available
                    if serial_port.in_waiting:
                        data = serial_port.read(serial_port.in_waiting)
                        try:
                            text = data.decode('ascii', errors='replace')
                            message_buffer += text
                        except Exception as e:
                            logger.debug(f"Decode error: {e}")
                            message_buffer = ""
                            continue
                        
                        # Process complete NMEA sentences
                        while '\n' in message_buffer:
                            line_end = message_buffer.find('\n')
                            sentence = message_buffer[:line_end].strip()
                            message_buffer = message_buffer[line_end+1:]
                            
                            if sentence and sentence.startswith('$'):
                                message_count += 1
                                self._parse_nmea(gps_name, sentence)
                    
                    # Update message rate calculation every second
                    now = time.time()
                    if now - last_message_count_time >= 1.0:
                        elapsed = now - last_message_count_time
                        self.gps_data[gps_name]["messages_per_sec"] = message_count / elapsed
                        message_count = 0
                        last_message_count_time = now
                    
                    # Small delay to prevent CPU hogging
                    time.sleep(0.01)
                    
                except Exception as e:
                    logger.error(f"Error in {gps_name} GPS reader: {e}")
                    time.sleep(1)  # Avoid rapid error loops
                    
        except Exception as e:
            logger.error(f"Fatal error in {gps_name} GPS reader thread: {e}")
    
    def _parse_nmea(self, gps_name, sentence):
        """Parse NMEA sentences and update GPS data"""
        try:
            parts = sentence.split(',')
            if len(parts) < 2:
                return
                
            sentence_type = parts[0]
            
            # GGA - Time, position, and fix data
            if sentence_type in ("$GPGGA", "$GNGGA"):
                # Check if we have enough parts
                if len(parts) < 15:
                    return
                    
                # Parse fix quality
                try:
                    fix_quality = int(parts[6]) if parts[6] else 0
                    self.gps_data[gps_name]["fix_quality"] = fix_quality
                    
                    # Parse satellites in use
                    if parts[7]:
                        self.gps_data[gps_name]["satellites"] = int(parts[7])
                    
                    # Parse HDOP
                    if parts[8]:
                        self.gps_data[gps_name]["hdop"] = float(parts[8])
                    
                    # Only update position if we have a fix
                    if fix_quality > 0:
                        # Extract latitude
                        if parts[2] and parts[3]:
                            lat_deg = float(parts[2][:2])
                            lat_min = float(parts[2][2:])
                            lat_decimal = lat_deg + (lat_min / 60.0)
                            if parts[3] == 'S':
                                lat_decimal = -lat_decimal
                            self.gps_data[gps_name]["lat"] = lat_decimal
                        
                        # Extract longitude
                        if parts[4] and parts[5]:
                            lon_deg = float(parts[4][:3])
                            lon_min = float(parts[4][3:])
                            lon_decimal = lon_deg + (lon_min / 60.0)
                            if parts[5] == 'W':
                                lon_decimal = -lon_decimal
                            self.gps_data[gps_name]["lon"] = lon_decimal
                        
                        self.gps_data[gps_name]["last_update"] = time.time()
                except Exception as e:
                    logger.debug(f"Error parsing GGA: {e}")
            
            # RMC - Recommended minimum data
            elif sentence_type in ("$GPRMC", "$GNRMC"):
                try:
                    # Check if data is valid
                    if parts[2] == 'A':
                        # Extract speed in knots, convert to m/s
                        if parts[7]:
                            speed_knots = float(parts[7])
                            speed_ms = speed_knots * 0.514444
                            self.gps_data[gps_name]["speed"] = speed_ms
                        
                        # Extract heading/course
                        if parts[8]:
                            heading = float(parts[8])
                            self.gps_data[gps_name]["heading"] = heading
                except Exception as e:
                    logger.debug(f"Error parsing RMC: {e}")
                    
            # VTG - Course and speed information
            elif sentence_type in ("$GPVTG", "$GNVTG"):
                try:
                    # Extract true heading
                    if parts[1]:
                        heading = float(parts[1])
                        self.gps_data[gps_name]["heading"] = heading
                    
                    # Extract speed in km/h, convert to m/s
                    if parts[7]:
                        speed_kmh = float(parts[7])
                        speed_ms = speed_kmh / 3.6
                        self.gps_data[gps_name]["speed"] = speed_ms
                except Exception as e:
                    logger.debug(f"Error parsing VTG: {e}")
            
        except Exception as e:
            logger.debug(f"Error parsing NMEA sentence: {e}")
    
    def _start_simulation(self):
        """Create a simple GPS simulation"""
        logger.info("Starting GPS simulation")
        
        # Default starting position in Wilmington
        self.gps_data["front"]["lat"] = 34.2257
        self.gps_data["front"]["lon"] = -77.9447
        self.gps_data["front"]["heading"] = 0.0
        self.gps_data["front"]["speed"] = 0.0
        self.gps_data["front"]["fix_quality"] = 4
        self.gps_data["front"]["satellites"] = 14
        self.gps_data["front"]["hdop"] = 0.8
        
        # Rear GPS is 30cm behind
        self.gps_data["rear"]["lat"] = 34.2257 - 0.0000027
        self.gps_data["rear"]["lon"] = -77.9447
        self.gps_data["rear"]["heading"] = 0.0
        self.gps_data["rear"]["speed"] = 0.0
        self.gps_data["rear"]["fix_quality"] = 4
        self.gps_data["rear"]["satellites"] = 14
        self.gps_data["rear"]["hdop"] = 0.8
        
        # Start simulation thread
        self.sim_thread = threading.Thread(
            target=self._sim_thread_function,
            daemon=True
        )
        self.sim_thread.start()
    
    def _sim_thread_function(self):
        """Run GPS simulation updates"""
        # Constants for simulation
        METERS_PER_LAT = 111111.0  # Approx meters per degree latitude
        update_interval = 0.1      # 10Hz update rate
        
        # Simulation state
        sim_speed = 0.0
        sim_heading = 0.0
        last_update = time.time()
        
        try:
            while True:
                now = time.time()
                delta_t = now - last_update
                
                if delta_t >= update_interval:
                    last_update = now
                    
                    # Simulate movement
                    distance = sim_speed * delta_t
                    
                    # Convert heading to radians for calculation
                    heading_rad = math.radians(sim_heading)
                    
                    # Calculate position change
                    meters_per_lon = METERS_PER_LAT * math.cos(math.radians(self.gps_data["front"]["lat"]))
                    lat_change = distance * math.cos(heading_rad) / METERS_PER_LAT
                    lon_change = distance * math.sin(heading_rad) / meters_per_lon
                    
                    # Update front GPS position
                    self.gps_data["front"]["lat"] += lat_change
                    self.gps_data["front"]["lon"] += lon_change
                    self.gps_data["front"]["heading"] = sim_heading
                    self.gps_data["front"]["speed"] = sim_speed
                    self.gps_data["front"]["last_update"] = now
                    self.gps_data["front"]["messages_per_sec"] = 10.0
                    
                    # Calculate rear GPS position (30cm behind front)
                    rear_heading_rad = math.radians((sim_heading + 180) % 360)
                    rear_distance = 0.3  # 30cm
                    
                    rear_lat_change = rear_distance * math.cos(rear_heading_rad) / METERS_PER_LAT
                    rear_lon_change = rear_distance * math.sin(rear_heading_rad) / meters_per_lon
                    
                    # Update rear GPS position
                    self.gps_data["rear"]["lat"] = self.gps_data["front"]["lat"] + rear_lat_change
                    self.gps_data["rear"]["lon"] = self.gps_data["front"]["lon"] + rear_lon_change
                    self.gps_data["rear"]["heading"] = sim_heading
                    self.gps_data["rear"]["speed"] = sim_speed
                    self.gps_data["rear"]["last_update"] = now
                    self.gps_data["rear"]["messages_per_sec"] = 10.0
                
                # Sleep briefly to avoid CPU hogging
                time.sleep(0.01)
                
        except Exception as e:
            logger.error(f"Error in GPS simulation: {e}")
    
    def get_position_and_heading(self):
        """
        Get current position, heading and speed.
        
        ALWAYS calculates heading from the two GPS positions for consistency.
        Ignores the reported heading from NMEA data to maintain alignment with
        serial_gps_monitor implementation.
        
        Returns:
            tuple: (latitude, longitude, heading, speed)
        """
        # Get front GPS position
        lat = self.gps_data["front"]["lat"]
        lon = self.gps_data["front"]["lon"]
        speed = self.gps_data["front"]["speed"]
        
        # Calculate heading from the two GPS positions if both are available
        front_valid = (self.gps_data["front"]["lat"] is not None and
                      self.gps_data["front"]["lon"] is not None and 
                      self.gps_data["front"]["fix_quality"] > 0)
                       
        rear_valid = (self.gps_data["rear"]["lat"] is not None and
                     self.gps_data["rear"]["lon"] is not None and 
                     self.gps_data["rear"]["fix_quality"] > 0)
        
        # ALWAYS prefer calculated heading between GPSes
        if front_valid and rear_valid:
            heading = self.calculate_bearing(
                self.gps_data["rear"]["lat"],
                self.gps_data["rear"]["lon"],
                self.gps_data["front"]["lat"],
                self.gps_data["front"]["lon"]
            )
            logger.debug(f"Using calculated heading from GPS positions: {heading:.1f}°")
        else:
            # Only fall back to NMEA heading if we must
            heading = self.gps_data["front"]["heading"]
            
            # Fix: Check if heading is None before formatting
            if heading is not None:
                logger.warning(f"Using NMEA reported heading: {heading:.1f}° (no dual GPS fix available)")
            else:
                logger.warning("No heading available (missing GPS data)")
        
        # Optional: log the difference between calculated and reported heading for analysis
        if front_valid and rear_valid and self.gps_data["front"]["heading"] is not None:
            calculated = heading
            reported = self.gps_data["front"]["heading"]
            diff = abs((calculated - reported + 180) % 360 - 180)
            logger.debug(f"Heading difference: calculated={calculated:.1f}°, reported={reported:.1f}°, diff={diff:.1f}°")
        
        return lat, lon, heading, speed
    
    def calculate_bearing(self, lat1, lon1, lat2, lon2):
        """
        Calculate the bearing from point 1 to point 2.
        This is a static method that can be used for testing.
        
        Args:
            lat1, lon1: Origin coordinates in decimal degrees
            lat2, lon2: Destination coordinates in decimal degrees
            
        Returns:
            float: Bearing in degrees (0-360 range)
        """
        try:
            # Convert to radians
            lat1_rad = math.radians(lat1)
            lon1_rad = math.radians(lon1)
            lat2_rad = math.radians(lat2)
            lon2_rad = math.radians(lon2)
            
            # Calculate bearing
            dlon = lon2_rad - lon1_rad
            y = math.sin(dlon) * math.cos(lat2_rad)
            x = math.cos(lat1_rad) * math.sin(lat2_rad) - math.sin(lat1_rad) * math.cos(lat2_rad) * math.cos(dlon)
            bearing = math.atan2(y, x)
            
            # Convert to degrees and normalize to 0-360
            bearing_deg = math.degrees(bearing) 
            bearing_deg = (bearing_deg + 360) % 360
            
            return bearing_deg
            
        except Exception as e:
            logger.error(f"Error calculating bearing: {e}")
            return 0.0
    
    def get_gps_info(self):
        """Get detailed GPS information for debugging"""
        front = self.gps_data["front"]
        rear = self.gps_data["rear"]
        
        info = {
            "front": {
                "position": (front["lat"], front["lon"]),
                "heading": front["heading"],
                "speed": front["speed"],
                "fix": front["fix_quality"],
                "hdop": front["hdop"],
                "satellites": front["satellites"],
                "update_rate": front["messages_per_sec"]
            },
            "rear": {
                "position": (rear["lat"], rear["lon"]),
                "heading": rear["heading"],
                "speed": rear["speed"], 
                "fix": rear["fix_quality"],
                "hdop": rear["hdop"],
                "satellites": rear["satellites"],
                "update_rate": rear["messages_per_sec"]
            },
            "rover": {
                "position": (front["lat"], front["lon"]),
                "calculated_heading": self.calculate_bearing(
                    rear["lat"], rear["lon"],
                    front["lat"], front["lon"]
                ) if None not in (rear["lat"], rear["lon"], front["lat"], front["lon"]) else None,
                "reported_heading": front["heading"],
                "speed": front["speed"]
            }
        }
        
        return info
    
    def stop(self):
        """Stop GPS monitor and release resources"""
        self.running = False
        
        if not self.simulation_mode:
            if hasattr(self, 'front_serial'):
                self.front_serial.close()
            if hasattr(self, 'rear_serial'):
                self.rear_serial.close()
    
    def debug_bearing_from_positions(self):
        """Debug method to print bearing calculations with current positions"""
        front_lat = self.gps_data["front"]["lat"]
        front_lon = self.gps_data["front"]["lon"]
        rear_lat = self.gps_data["rear"]["lat"]
        rear_lon = self.gps_data["rear"]["lon"]
        
        # Check if we have valid positions before calculating
        if None in (front_lat, front_lon, rear_lat, rear_lon):
            logger.warning("Cannot debug bearing: Some GPS positions are missing")
            logger.warning(f"Front GPS: {front_lat}, {front_lon}")
            logger.warning(f"Rear GPS: {rear_lat}, {rear_lon}")
            return None
        
        # Calculate bearing from rear to front GPS
        calculated_bearing = self.calculate_bearing(rear_lat, rear_lon, front_lat, front_lon)
        
        # Get the heading from GPS module
        reported_heading = self.gps_data["front"]["heading"]
        
        # Print debug info
        logger.info(f"===== BEARING DEBUG =====")
        logger.info(f"Front GPS: ({front_lat:.7f}, {front_lon:.7f})")
        logger.info(f"Rear GPS: ({rear_lat:.7f}, {rear_lon:.7f})")
        logger.info(f"Calculated bearing: {calculated_bearing:.1f}°")
        
        # Check if reported heading is available
        if reported_heading is not None:
            logger.info(f"Reported heading: {reported_heading:.1f}° (from GPS)")
            logger.info(f"Difference: {abs(calculated_bearing - reported_heading):.1f}°")
        else:
            logger.info("Reported heading: Not available")
            
        logger.info(f"========================")
        
        return calculated_bearing


# Test function for the GPS monitor
def test_gps_monitor():
    logging.basicConfig(level=logging.INFO, 
                        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    # Test bearing calculation
    print("Testing bearing calculation...")
    
    # Test point pairs (real-world examples)
    test_points = [
        # From->To coordinates, Expected bearing
        ((34.1519056, -77.8667716), (34.1519829, -77.8669909), 295.3),
        ((34.2257, -77.9447), (34.2257, -77.9445), 90.0),  # Due East
        ((34.2257, -77.9447), (34.2257, -77.9449), 270.0), # Due West
        ((34.2257, -77.9447), (34.2259, -77.9447), 0.0),   # Due North
        ((34.2257, -77.9447), (34.2255, -77.9447), 180.0)  # Due South
    ]
    
    monitor = GPSMonitor(simulation_mode=True)
    
    for i, ((lat1, lon1), (lat2, lon2), expected) in enumerate(test_points):
        bearing = monitor.calculate_bearing(lat1, lon1, lat2, lon2)
        diff = min(abs(bearing - expected), abs(bearing - expected + 360), abs(bearing - expected - 360))
        
        print(f"Test {i+1}: ({lat1}, {lon1}) to ({lat2}, {lon2})")
        print(f"  Calculated: {bearing:.1f}°, Expected: {expected:.1f}°, Diff: {diff:.1f}°")
        print(f"  {'PASS' if diff < 0.5 else 'FAIL'}")
    
    # Verify parameter ordering
    print("\nVerifying parameter ordering...")
    test_from = (34.1519056, -77.8667716)
    test_to = (34.1519829, -77.8669909)
    
    print(f"From {test_from} to {test_to}")
    print(f"  Standard: {monitor.calculate_bearing(test_from[0], test_from[1], test_to[0], test_to[1]):.1f}°")
    print(f"  Swapped points: {monitor.calculate_bearing(test_to[0], test_to[1], test_from[0], test_from[1]):.1f}°")
    print(f"  Swapped params: {monitor.calculate_bearing(test_from[1], test_from[0], test_to[0], test_to[1]):.1f}°")

    # Debug distance calculation
    def debug_distance_calculation(lat, lon, target_wp):
        """Debug the distance calculation method used in GPS test"""
        print("\n=== DEBUG DISTANCE CALCULATION ===")
        print(f"Current position: ({lat}, {lon})")
        print(f"Target waypoint: {target_wp}")
        
        # Calculate using different methods
        from geopy.distance import geodesic
        geodesic_distance = geodesic((lat, lon), target_wp).meters
        
        # Check if there's any transformation applied
        test_methods = {
            "Direct geodesic": geodesic_distance,
            "Scaled 60%": geodesic_distance * 0.60,
            "Scaled 70%": geodesic_distance * 0.70,
            "Projected": None  # We'll calculate this below
        }
        
        # Try a simple 2D projection (flat earth approximation)
        import math
        lat_to_m = 111111  # 1 degree latitude ~= 111,111 meters
        lon_to_m = 111111 * math.cos(math.radians(lat))  # Longitude scale depends on latitude
        
        dx = (target_wp[1] - lon) * lon_to_m
        dy = (target_wp[0] - lat) * lat_to_m
        projected_distance = math.sqrt(dx*dx + dy*dy)
        test_methods["Projected"] = projected_distance
        
        # Print comparison
        print("\nMethod comparisons:")
        for method, distance in test_methods.items():
            print(f"{method}: {distance:.1f}m")
        
        # Compare to GPS test expected values
        gps_test_values = [12.0, 18.8, 13.1, 2.1]
        print("\nCompared to GPS test values:")
        for i, val in enumerate(gps_test_values):
            if i < 1:  # Only compare first waypoint
                ratio = val / geodesic_distance if geodesic_distance > 0 else 0
                print(f"WP {i}: GPS test={val:.1f}m, Geodesic={geodesic_distance:.1f}m, Ratio={ratio:.2f}")
        
        print("==================================")
    
    # Test with your specific coordinates
    test_pos = (34.1519056, -77.8667716)
    test_wp = (34.1519056, -77.8670785)  # WP 0 from your data
    debug_distance_calculation(test_pos[0], test_pos[1], test_wp)


# Create this as a separate function outside the test_gps_monitor function
def debug_distance_calculation(lat, lon, target_wp):
    """Debug the distance calculation method used in GPS test"""
    print("\n=== DEBUG DISTANCE CALCULATION ===")
    print(f"Current position: ({lat}, {lon})")
    print(f"Target waypoint: {target_wp}")
    
    # Calculate using different methods
    from geopy.distance import geodesic
    geodesic_distance = geodesic((lat, lon), target_wp).meters
    
    # Check if there's any transformation applied
    test_methods = {
        "Direct geodesic": geodesic_distance,
        "Scaled 60%": geodesic_distance * 0.60,
        "Scaled 50%": geodesic_distance * 0.50,
        "Projected": None  # We'll calculate this below
    }
    
    # Try a simple 2D projection (flat earth approximation)
    import math
    lat_to_m = 111111  # 1 degree latitude ~= 111,111 meters
    lon_to_m = 111111 * math.cos(math.radians(lat))  # Longitude scale depends on latitude
    
    dx = (target_wp[1] - lon) * lon_to_m
    dy = (target_wp[0] - lat) * lat_to_m
    projected_distance = math.sqrt(dx*dx + dy*dy)
    test_methods["Projected"] = projected_distance
    
    # Print comparison
    print("\nMethod comparisons:")
    for method, distance in test_methods.items():
        print(f"{method}: {distance:.1f}m")
    
    # Compare to GPS test expected values
    gps_test_values = [12.0, 18.8, 13.1, 2.1]
    print("\nCompared to GPS test values:")
    if target_wp == (34.1519056, -77.8670785):  # WP 0
        val = gps_test_values[0]
        ratio = val / geodesic_distance if geodesic_distance > 0 else 0
        print(f"WP 0: GPS test={val:.1f}m, Geodesic={geodesic_distance:.1f}m, Ratio={ratio:.2f}")
    
    print("==================================")


if __name__ == "__main__":
    test_gps_monitor()